generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  image         String
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  access_token  String?
  Member        Member[]
  role          Role?
  Project       Project[]
}

enum Role {
  youtuber
  editor
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  Owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String   @db.ObjectId
  name        String   @unique
  description String?  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Video       Video[]
  members     Member[]
}

model Member {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  User             User?         @relation(fields: [userId], references: [id])
  userId           String?       @db.ObjectId
  email            String?
  role             Role
  Project          Project       @relation(fields: [projectId], references: [id])
  projectId        String        @db.ObjectId
  status           MemberStatus?
  inviteCode       String?
  inviteCodeExpiry DateTime?
}

enum MemberStatus {
  pending
  accepted
  rejected
}

model Video {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  description             String
  keywords                String[]
  tags                    String[]
  category                String
  defaultLanguage         String
  privacyStatus           String
  embeddable              Boolean?
  license                 String?
  publishAt               DateTime
  thumbnail               String?
  selfDeclaredMadeForKids Boolean?
  url                     String?
  duration                Int?
  channelId               String?
  uploadStatus            String
  failureReason           String?
  isApproved              Boolean?
  Project                 Project  @relation(fields: [projectId], references: [id])
  projectId               String   @db.ObjectId
}
